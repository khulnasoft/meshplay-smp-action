name: "Performance Testing with Meshplay"
description: "Run performance tests in SMP format with Meshplay"
author: "Layer5"

inputs:
  # token to authenticate with Meshplay
  # see: https://docs.meshplay.io/guides/performance-management#running-performance-benchmarks-in-your-pipelines
  provider_token:
    description: "Provider token to use. NOTE: value of the 'token' key in auth.json"
    required: true

  # platform to deploy Meshplay to
  platform:
    description: "Platform to deploy Meshplay to. Allowed values: docker, kubernetes"
    default: docker
    required: false

  # provide either a test configuration file or a performance profile name

  # name of the test configuration file written in SMP compatible format
  # see: https://docs.meshplay.io/guides/performance-management#running-performance-benchmarks-through-meshplayctl
  # store this file in the .github folder in your repository
  profile_filename:
    description: "Name of the test configuration file"
    required: false

  # name of the performance profile to use to run tests
  # see: https://docs.meshplay.io/functionality/performance-management#performance-profiles
  profile_name:
    description: "Name of the performance profile"
    required: false

  # overrides the endpoint_url specified in the test configuration file
  # use this for dynamically injecting the application endpoint while using the action
  endpoint_url:
    description: "Endpoint in which the application is deployed"
    required: false

  # overrides the mesh type specified in the test configuration file
  # use this for dynamically injecting the service mesh while using the action
  service_mesh:
    description: "Service Mesh which is being tested"
    required: false

  # overrides the name specified in the test configuration file
  # use this for dynamically injecting the test name while using the action
  test_name:
    description: "Name of the test"
    required: false

  # overrides the load generator specified in the test configuration file
  # use this for dynamically injecting the load generator to test with while using the action
  load_generator:
    description: "Load generator to run tests with"
    required: false

runs:
  using: "node16"
  main: "main.js"

branding:
  icon: 'check-circle'
  color: 'green'
